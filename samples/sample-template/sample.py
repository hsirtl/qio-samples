#!/usr/bin/env python
# coding: utf-8

# TITLE

import json
from re import T
from azure.quantum.optimization import Term, Problem, ProblemType
from azure.quantum import Workspace
from azure.quantum.optimization import SimulatedAnnealing # Change this line to match the Azure Quantum Optimization solver type you wish to use


# Copy the settings for your workspace below
workspace = Workspace (
    subscription_id = "72f8c137-a3b1-4252-96be-1d2f4f43a42f",
    resource_group = "devops-qc-func-rg",
    name = "devopsqcfunc-qws",
    location = "eastus"
)


# create a cost function based on a problem statement
def createCostFunction(problem):
    terms = []
    terms.append(Term(c=1, indices=[0,1]))
    return terms

def extractSolution(problem, result):
    result = {}
    return result

def validateSolution(problem, solution):
    return True

def printProblem(problem):
    print(problem)

def printSolution(solution):
    print(solution)


# read problem data
problem = {}

# create a cost function out of the problem data
terms = createCostFunction(problem)

# submit the cost function to a solver
problem = Problem(name="problem", problem_type=ProblemType.pubo, terms=terms)
solver = SimulatedAnnealing(workspace, timeout=100, seed=22)
job = solver.submit(problem)
job.refresh()

# get the result
result = job.get_results()

# extract the solution generated by the solver
solution = extractSolution(problem, result)

# validate the solution
isValidSolution = validateSolution(problem, solution)
if isValidSolution:
    print ("Solution is valid.")
else:
    print ("Solution is not valid.")

# print the solution
printSolution(solution)
